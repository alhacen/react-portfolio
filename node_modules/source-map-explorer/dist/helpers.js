'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports.getFileContent = getFileContent;
exports.formatBytes = formatBytes;
exports.formatPercent = formatPercent;
exports.getCommonPathPrefix = getCommonPathPrefix;

var _fs = _interopRequireDefault(require('fs'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function getFileContent(file) {
  const buffer = Buffer.isBuffer(file) ? file : _fs.default.readFileSync(file);
  return buffer.toString();
}

const BYTE_SIZES = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
/**
 * Format number of bytes as string
 * Source @see https://stackoverflow.com/a/18650828/388951
 */

function formatBytes(bytes, decimals = 2, base = 1000) {
  if (bytes === 0) return `0 ${BYTE_SIZES[0]}`;
  const exponent = Math.floor(Math.log(bytes) / Math.log(base));
  const value = bytes / Math.pow(base, exponent); // `parseFloat` removes trailing zero

  return `${parseFloat(value.toFixed(decimals))} ${BYTE_SIZES[exponent]}`;
}

function formatPercent(value, total, fractionDigits) {
  return ((100.0 * value) / total).toFixed(fractionDigits);
}

const PATH_SEPARATOR_REGEX = /(\/)/;
/**
 * Find common path prefix
 * Source @see http://stackoverflow.com/a/1917041/388951
 * @param paths List of filenames
 */

function getCommonPathPrefix(paths) {
  if (paths.length < 2) return '';
  const A = paths.concat().sort(),
    a1 = A[0].split(PATH_SEPARATOR_REGEX),
    a2 = A[A.length - 1].split(PATH_SEPARATOR_REGEX),
    L = a1.length;
  let i = 0;

  while (i < L && a1[i] === a2[i]) i++;

  return a1.slice(0, i).join('');
}
