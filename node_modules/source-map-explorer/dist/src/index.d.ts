/// <reference types="node" />
import { explore } from './api';
export { explore };
export default explore;
export declare type FileSizeMap = Record<string, number>;
export interface FileSizes {
    files: FileSizeMap;
    unmappedBytes: number;
    totalBytes: number;
}
export declare type ErrorCode = 'Unknown' | 'NoBundles' | 'NoSourceMap' | 'OneSourceSourceMap' | 'UnmappedBytes' | 'InvalidMappingLine' | 'InvalidMappingColumn' | 'CannotSaveFile' | 'CannotCreateTempFile' | 'CannotOpenTempFile';
export declare type File = string | Buffer;
export declare type ReplaceMap = Record<string, string>;
export declare type OutputFormat = 'json' | 'tsv' | 'html';
/** Represents single bundle */
export interface Bundle {
    code: File;
    map?: File;
}
export interface ExploreOptions {
    /** Exclude "unmapped" bytes from the output */
    onlyMapped?: boolean;
    /** Output result as a string */
    output?: {
        format: OutputFormat;
        /** Filename to save output to */
        filename?: string;
    };
    /** Disable removing prefix shared by all sources */
    noRoot?: boolean;
    /** Replace "this" by "that" map */
    replaceMap?: ReplaceMap;
}
export interface ExploreResult {
    bundles: ExploreBundleResult[];
    /** Result as a string - either JSON, TSV or HTML */
    output?: string;
    errors: ExploreErrorResult[];
}
export interface ExploreBundleResult extends FileSizes {
    bundleName: string;
}
export interface ExploreErrorResult {
    bundleName: string;
    code: string;
    message: string;
    error?: NodeJS.ErrnoException;
    isWarning?: boolean;
}
export declare type BundlesAndFileTokens = (Bundle | string)[] | Bundle | string;
declare module 'source-map' {
    interface MappingItem {
        lastGeneratedColumn: number | null;
    }
}
